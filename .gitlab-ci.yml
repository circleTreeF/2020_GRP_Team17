# Official framework image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python
image: docker:stable


# Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: http://docs.gitlab.com/ee/ci/docker/using_docker_images.html#what-is-a-service
services:
  - docker:dind



variables:
  DOCKER_DRIVER: overlay2
#  CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_BUILD_REF_SLUG
#  CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest
  POSTGRES_DB: postgres
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres

stages:
  - run
  - test



# This folder is cached between builds
# http://docs.gitlab.com/ee/ci/yaml/README.html#cache
cache:
  paths:
    - ~/.cache/pip/

# This is a basic example for a gem or script which doesn't use
# services such as redis or postgres
before_script:
  - apk add --update py-pip
  - pip install docker-compose
  - python -V  # Print out python version for debugging
  # Uncomment next line if your Django app needs a JS runtime:
  - apt-get update -q
  #  - apt-get install nodejs -yqq
  - pip install -r requirements.txt

run:
  stage: run
  script:
  - docker-compose up
  only:
    - server

# To get Django tests to work you may need to create a settings file using
# the following DATABASES:
#
# DATABASES = {
#     'default': {
#        'ENGINE': 'django.db.backends.postgresql',
#        'NAME': 'postgres',
#        'USER': 'postgres',
#        'PASSWORD': 'postgres',
#        'HOST': 'db',
#        'PORT': '5432',
#    },
# }
#
# and then adding `--settings app.settings.ci` (or similar) to the test command

test:
  variables:
    DATABASE_URL: "postgresql://db:postgres@postgres:5432/$POSTGRES_DB"
  script:
    - python manage.py test
  only:
    - server
